; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -verify-machineinstrs -mtriple=powerpc64le-unknown-linux-gnu \
; RUN:   -mcpu=pwr9 < %s | FileCheck %s --check-prefix=CHECK-64
; RUN: llc -verify-machineinstrs -mtriple=powerpc64-unknown-linux-gnu \
; RUN:   -mcpu=pwr9 < %s | FileCheck %s --check-prefix=CHECK-64
; RUN: llc -verify-machineinstrs -mtriple=powerpc-unknown-aix \
; RUN:   -mcpu=pwr9 < %s | FileCheck %s --check-prefix=CHECK-32
; RUN: llc -verify-machineinstrs -mtriple=powerpc64-unknown-aix \
; RUN:   -mcpu=pwr9 < %s | FileCheck %s --check-prefix=CHECK-64

declare double @llvm.ppc.fcfid(double %a)
define dso_local double @test_fcfid(double %a) {
; CHECK-64-LABEL: test_fcfid:
; CHECK-64:       # %bb.0:
; CHECK-64-NEXT:    xscvsxddp 1, 1
; CHECK-64-NEXT:    blr
;
; CHECK-32-LABEL: test_fcfid:
; CHECK-32:       # %bb.0:
; CHECK-32-NEXT:    xscvsxddp 1, 1
; CHECK-32-NEXT:    blr
  %1 = call double @llvm.ppc.fcfid(double %a)
  ret double %1
}

declare double @llvm.ppc.fcfud(double %a)
define dso_local double @test_fcfud(double %a) {
; CHECK-64-LABEL: test_fcfud:
; CHECK-64:       # %bb.0:
; CHECK-64-NEXT:    xscvuxddp 1, 1
; CHECK-64-NEXT:    blr
;
; CHECK-32-LABEL: test_fcfud:
; CHECK-32:       # %bb.0:
; CHECK-32-NEXT:    xscvuxddp 1, 1
; CHECK-32-NEXT:    blr
  %1 = call double @llvm.ppc.fcfud(double %a)
  ret double %1
}

declare double @llvm.ppc.fctid(double %a)
define dso_local double @test_fctid(double %a) {
; CHECK-64-LABEL: test_fctid:
; CHECK-64:       # %bb.0:
; CHECK-64-NEXT:    fctid 1, 1
; CHECK-64-NEXT:    blr
;
; CHECK-32-LABEL: test_fctid:
; CHECK-32:       # %bb.0:
; CHECK-32-NEXT:    fctid 1, 1
; CHECK-32-NEXT:    blr
  %1 = call double @llvm.ppc.fctid(double %a)
  ret double %1
}

declare double @llvm.ppc.fctidz(double %a)
define dso_local double @test_fctidz(double %a) {
; CHECK-64-LABEL: test_fctidz:
; CHECK-64:       # %bb.0:
; CHECK-64-NEXT:    fctid 1, 1
; CHECK-64-NEXT:    blr
;
; CHECK-32-LABEL: test_fctidz:
; CHECK-32:       # %bb.0:
; CHECK-32-NEXT:    fctid 1, 1
; CHECK-32-NEXT:    blr
  %1 = call double @llvm.ppc.fctid(double %a)
  ret double %1
}

declare double @llvm.ppc.fctiw(double %a)
define dso_local double @test_fctiw(double %a) {
; CHECK-64-LABEL: test_fctiw:
; CHECK-64:       # %bb.0:
; CHECK-64-NEXT:    fctid 1, 1
; CHECK-64-NEXT:    blr
;
; CHECK-32-LABEL: test_fctiw:
; CHECK-32:       # %bb.0:
; CHECK-32-NEXT:    fctid 1, 1
; CHECK-32-NEXT:    blr
  %1 = call double @llvm.ppc.fctid(double %a)
  ret double %1
}

declare double @llvm.ppc.fctiwz(double %a)
define dso_local double @test_fctiwz(double %a) {
; CHECK-64-LABEL: test_fctiwz:
; CHECK-64:       # %bb.0:
; CHECK-64-NEXT:    fctid 1, 1
; CHECK-64-NEXT:    blr
;
; CHECK-32-LABEL: test_fctiwz:
; CHECK-32:       # %bb.0:
; CHECK-32-NEXT:    fctid 1, 1
; CHECK-32-NEXT:    blr
  %1 = call double @llvm.ppc.fctid(double %a)
  ret double %1
}

declare double @llvm.ppc.fctudz(double %a)
define dso_local double @test_fctudz(double %a) {
; CHECK-64-LABEL: test_fctudz:
; CHECK-64:       # %bb.0:
; CHECK-64-NEXT:    fctid 1, 1
; CHECK-64-NEXT:    blr
;
; CHECK-32-LABEL: test_fctudz:
; CHECK-32:       # %bb.0:
; CHECK-32-NEXT:    fctid 1, 1
; CHECK-32-NEXT:    blr
  %1 = call double @llvm.ppc.fctid(double %a)
  ret double %1
}

declare double @llvm.ppc.fctuwz(double %a)
define dso_local double @test_fctuwz(double %a) {
; CHECK-64-LABEL: test_fctuwz:
; CHECK-64:       # %bb.0:
; CHECK-64-NEXT:    fctid 1, 1
; CHECK-64-NEXT:    blr
;
; CHECK-32-LABEL: test_fctuwz:
; CHECK-32:       # %bb.0:
; CHECK-32-NEXT:    fctid 1, 1
; CHECK-32-NEXT:    blr
  %1 = call double @llvm.ppc.fctid(double %a)
  ret double %1
}
